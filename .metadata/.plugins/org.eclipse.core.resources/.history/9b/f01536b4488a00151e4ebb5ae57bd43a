package uk.ac.ucl.cs.nterreri.GraphicsDemo;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JPanel;
import javax.swing.Timer;

class DrawingPaneOriginal extends JPanel implements ActionListener {

	protected Timer timer;
	//blue ball data:
	private int blueX, blueY, blueDiameter;
	private boolean blueBouncedLeft;
	//green ball data:
	private int greenX, greenY, greenDiameter;
	private boolean greenBouncedTop;

	
	/**
	 * Sets up the initial state of the panel.
	 * <p>
	 * Had to be separated from constructor call because at that time the panel
	 * has no extension. The panel has null extension until AFTER the FRAME is
	 * set to visible.
	 * <p>
	 * Only after that point this method can be called.
	 */
	protected void drawInit() {
		
		Dimension paneSize = getSize();
		
		//blue ball diameter is 10% of smallest between height and width:
		blueDiameter = (Math.min(paneSize.width, paneSize.height))/10;
		blueX = (getWidth() - blueDiameter) - 1; 
		blueY = getHeight()/2; //this is constant throughout
		blueBouncedLeft = false; //blue ball moves leftwards initially
		

		//green ball diameter is 15%-ish of smallest between height and width:
		greenDiameter = (Math.min(paneSize.width, paneSize.height))/7;
		greenX = getWidth()/2; //this is constant throughout
		greenY = (getHeight() - greenDiameter) - 1;
		greenBouncedTop = false;
		
		timer = new Timer(1, this);
		timer.start();
	}

	@Override
	public void actionPerformed(ActionEvent e) {

		blueBouncedLeft = shift(blueBouncedLeft);
		greenBouncedTop = shift(greenBouncedTop);
		repaint();
	}

	/**
	 * Shifts the blue ball either left or right depending on parameter value:
	 * only after the ball has hit the left border of the panel it starts 
	 * travelling back to the right. Once it hits the right border, it starts
	 * travelling leftwards again.
	 * <p>
	 * @param blueBouncedLeft if false, ball travels leftwards, if true,
	 * rightwards.
	 * 
	 * @return The function returns the value opposite to the parameter when 
	 * the ball hits one of the borders, therefore the parameter is intended 
	 * to be visible and stored outside the scope of this method AND be 
	 * reassigned by this method at every call.
	 */
	private boolean shift(boolean bounced) {
		//shift leftwards if parameter is false, rightward if true
		if(blueBouncedLeft)
			blueX++;
		else
			blueX--;
		
		//return opposite of parameter value when border is hit:
		if((blueX == 0) || (blueX + blueDiameter == getWidth() - 1))
			return !blueBouncedLeft;
		else
			return blueBouncedLeft;
	}
	
	@Override
	public void paint(Graphics g) {
		Graphics2D g2 = (Graphics2D) g;

		//Background has to be repainted with every call of the present method,
		//otherwise it defaults.
		//However, setBackground(Color.BLACK); does nothing.
		//It is necessary to fill a rectangle the size of the content pane:
		g2.setColor(Color.BLACK);
		g2.fillRect(0, 0, getWidth() - 1, getHeight() - 1);

		//Antialiasing on:
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);

		//draw blue ball:
		g2.setColor(Color.BLUE);
		//g2.drawOval(0, getHeight()/2, diameter, diameter);//optional:drawing border
		g2.fillOval(blueX, blueY, blueDiameter, blueDiameter);
		
		//draw green ball:
		g2.setColor(Color.GREEN);
		g2.fillOval(greenX, greenY, greenDiameter, greenDiameter);
		
		
		
	}

}
