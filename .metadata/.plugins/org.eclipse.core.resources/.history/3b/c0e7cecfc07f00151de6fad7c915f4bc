package currency;

import java.awt.BorderLayout;
import java.awt.EventQueue;

import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.JLabel;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.DefaultComboBoxModel;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.NumberFormat;
import java.util.ArrayList;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;

/**
 * CurrencyFrameb is the main window application for a GUI currency converter 
 * calculator.
 * <p>
 * 
 * @author nterreri
 *
 */
public class CurrencyFrameb extends JFrame {

	/**
	 * adding serialVersionUID avoids a warning (?)
	 */
	private static final long serialVersionUID = 122380596439679935L;
	private JPanel contentPane;
	
	private JComboBox<String> currencyFromSelection;
	private JComboBox<String> currencyToSelection;
	
	private JFormattedTextField textField_amt;
	private JFormattedTextField textField_rslt;

	//Selected currencies data stored here:
	private Currency currencyFrom;
	private Currency currencyTo;
	
	/*One arraylist holds Currency objects, another holds String objects, finally
	 * a String array is necessary to populate the models for the JComboBox-es
	 * */
	private ArrayList<Currency> currencies;
	private ArrayList<String> currencies_name;
	private String [] currencies_name_array;
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					CurrencyFrameb frame = new CurrencyFrameb();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}

	/**
	 * Create the frame.
	 */
	public CurrencyFrameb() {
		//Initializing fields:
		currencyFrom = new Currency();
		currencyTo = new Currency();
		currencies = new ArrayList<Currency>();
		
		currencies_name = new ArrayList<String>();
		read_currencies_from_file("currencies");
		
		currencies_name_array = cast_currencies_name_to_array();
		
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 402, 295);
		contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JLabel lblConvertFrom = new JLabel("Convert from:");
		lblConvertFrom.setBounds(5, 55, 149, 15);
		contentPane.add(lblConvertFrom);
		
		JLabel lblConvertTo = new JLabel("Convert to:");
		lblConvertTo.setBounds(229, 55, 106, 15);
		contentPane.add(lblConvertTo);
		
		JLabel lblAmount = new JLabel("Amount:");
		lblAmount.setBounds(12, 118, 70, 15);
		contentPane.add(lblAmount);
		
		JLabel lblResult = new JLabel("Result:");
		lblResult.setBounds(229, 118, 70, 15);
		contentPane.add(lblResult);
		
		//ComboBoxes:
		currencyFromSelection = new JComboBox<String>();
		currencyFromSelection.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				//User selects item from left combobox:
				try {
					currencyFrom = currencies.get(currencyFromSelection.getSelectedIndex() - 1);
				} catch (IndexOutOfBoundsException e) {
					currencyFrom = currencies.get(0);
					System.err.println("Caught index out of bounds exception, defaulting to first index.");
					e.printStackTrace();
					
				}
				
				/*String selectedCurrency = 
						(String)currencyFromSelection.getSelectedItem();
				//Constructor using name is called (Currency(String)):
				try {
					currencyFrom = new Currency(selectedCurrency);
				} catch (InvalidCurrencyException e) {
					currencyFrom = new Currency();
					e.printStackTrace();
				}*/
			}
		});
		
		currencyFromSelection.setModel(new DefaultComboBoxModel<String>
		(currencies_name_array));
		currencyFromSelection.setBounds(5, 82, 149, 24);
		contentPane.add(currencyFromSelection);
				
		currencyToSelection = new JComboBox<String>();
		currencyToSelection.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				try {
					currencyTo = currencies.get(currencyToSelection.getSelectedIndex() - 1);
				} catch (IndexOutOfBoundsException e) {
					currencyTo = currencies.get(0);
					System.err.println("Index out of bound exception caught, defaulting to first index.");
					e.printStackTrace();
					
				}
				/*String selectedCurrency = 
						(String)currencyToSelection.getSelectedItem();*/
				/*try {
					currencyTo = new Currency(selectedCurrency);
				} catch (InvalidCurrencyException e) {
					currencyTo = new Currency();
					e.printStackTrace();
				}*/
			}
		});
		
		currencyToSelection.setModel(new DefaultComboBoxModel<String>
		(currencies_name_array));
		currencyToSelection.setBounds(229, 82, 161, 24);
		contentPane.add(currencyToSelection);
		
		//textfields:
		textField_amt = new JFormattedTextField(NumberFormat.getNumberInstance());
		textField_amt.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				textField_rslt.setText(Double.toString(convert()));
			}
		});
		textField_amt.setBounds(5, 134, 114, 19);
		contentPane.add(textField_amt);
		textField_amt.setColumns(10);
		
		textField_rslt = new JFormattedTextField(NumberFormat.getNumberInstance());
		textField_rslt.setEditable(false);
		textField_rslt.setBounds(229, 134, 114, 19);
		contentPane.add(textField_rslt);
		textField_rslt.setColumns(10);
		
		//button:
		JButton btnConvert = new JButton("Convert");
		btnConvert.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				textField_rslt.setValue(convert());
			}
		});
		btnConvert.setBounds(5, 165, 117, 25);
		contentPane.add(btnConvert);
		
		//menu bar:
		JMenuBar menuBar = new JMenuBar();
		menuBar.setBounds(5, 5, 129, 21);
		contentPane.add(menuBar);
		
		JMenu mnFile = new JMenu("File");
		menuBar.add(mnFile);
		
		JMenuItem mntmNewMenuItem = new JMenuItem("Edit currencies file:");
		mntmNewMenuItem.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e {
				
			});
			
		}
		mnFile.add(mntmNewMenuItem);
		
		JMenuItem mntmNewMenuItem_1 = new JMenuItem("Exit");
		mntmNewMenuItem_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				System.exit(0);
			}
		});
		mnFile.add(mntmNewMenuItem_1);
		
			
	}
	
	public String[] cast_currencies_name_to_array(){
		
		String [] currencies_name_toArray = new String[currencies_name.size()];
		currencies_name_toArray = currencies_name.toArray(currencies_name_toArray);
		
		return currencies_name_toArray;
	}
	
	public void read_currencies_from_file(String filename){

		//check file existence:
		try {
			File f = new File(filename);
			if(!f.exists())
			{
				FileNotFoundException fe = 
						new FileNotFoundException("Could not find input file.");
				throw(fe);
			}
		} catch (FileNotFoundException fe) {
			System.err.println("Currencies file not found.\n"
					+ "Attempting to create a default \"currencies\" file\n"
					+ "in the root folder of the .jar file now running.");
			fe.printStackTrace();
			//attempt writing a default file if one does not exist:
			write_default_file();

		}

		//try reading file
		try {
			BufferedReader reader = Files.newBufferedReader(Paths.get(filename));
			String line = null;

			int i = 0;
			while((line = reader.readLine()) != null) {
				currencies.add(new Currency(line.substring(0, 3),
						Double.parseDouble(line.substring(4))));
				System.out.println(currencies.get(i));
				i++;
			}
		}catch (IOException e) {
			System.err.format("IOException: %s%n", e);
			e.printStackTrace();
			write_default_file();

		}

		currencies_name.add("");

		for(int i = 0; i < currencies.size(); i++)
			currencies_name.add(currencies.get(i).name);
	}
	
	public void write_default_file(){
		try {
			FileWriter os = new FileWriter("currencies");
			
			os.write("USD 1.0\n"
					+"GBP 2.0\n"
					+"YEN 3.0\n"
					+"EUR 4.0\n"
					+"RUB 5.0\n");
			os.close();
			
		} catch (IOException e) {
			System.err.format("IOException: %s%n", e);
			e.printStackTrace();
			System.err.println("The running .jar file requires properly formatted\n" 
					+ "\"currency\" file to exist within its root folder.\n"
					+ "Terminating program.");
		} 
		
	}
	
	public double convert(){
		try {
			return Double.parseDouble(textField_amt.getText()) *
				currencyFrom.compute_conversion_factor(currencyTo);
		} catch (ArithmeticException e) {
			e.printStackTrace();
			return 0.0;
		}
	}
}
